#!/usr/bin/env python2
import os
import sys
from wsgiref.simple_server import make_server
import urlparse
import datetime
import qrcode
import StringIO

import bch # Local library file

# Load and parse the config file
config = {
	'addresses': [],
}
try:
	f = open('minipos.cfg', 'r')
	lines = f.readlines()
	f.close()
except:
	print('No configuration file found')
	sys.exit(1)
for line in lines:
	# Skip blank lines and comments
	if line.strip() == '' or line.startswith('#'):
		continue
	# Split to key and value pairs
	words = line.strip().split('=')
	key = words[0].strip()
	value = '='.join(words[1:]).strip()
	if key == 'addresses':
		for addr in value.split(','):
			config['addresses'].append(addr)
	else:
		config[key] = value
# Sanitize config file
try:
	config['taxrate'] = float(config['taxrate'])
except:
	config['taxrate'] = 0
if 'currencies' not in config.keys():
	config['currencies'] = ['USD']
else:
	config['currencies'] = config['currencies'].split(',')
try:
	config['multiplier'] = float(config['multiplier'])
except:
	config['multiplier'] = 1
if config['addresses'] == []:
	print('Required key `addresses` is missing from configuration file')
	sys.exit(2)
if 'week_start' not in config or config['week_start'] == 'monday':
	config['week_start'] = 0
elif config['week_start'] == 'sunday':
	config['week_start'] = 1
else:
	print("Invalid 'week_start' value, falling back to 'monday'")
try:
	config['port'] = int(config['port'])
except:
	print(sys.exc_info()[1])
	config['port'] = 8080
if 'allowed_ips' not in config:
	config['allowed_ips'] = ['0.0.0.0']
else:
	config['allowed_ips'] = config['allowed_ips'].split(',')


# Utility wrapper function
def load_file(filename):
	src = open(filename, 'r')
	data = ''.join(src.readlines())
	src.close()
	return data

# Create a payment request QR page
def create_invoice(parameters):
	if 'currency' not in parameters:
		parameters['currency'] = config['currencies']
	currency = parameters['currency'][0]
	amount = float(parameters['amount'][0]) * config['multiplier']
	price = bch.get_price(currency)
	btc_amount = bch.btc(amount / price)
	# Use the next available address
	address = config['addresses'].pop(0)
	config['addresses'].append(address)
	balance, unconfirmed = bch.get_balance(address)
	balance += unconfirmed
	data = 'bitcoincash:%s?amount=%s&label=%s' % (address, btc_amount, 'MiniPOS')
	image = qrcode.make(data, error_correction=qrcode.constants.ERROR_CORRECT_L)
	output = StringIO.StringIO()
	image.save(output)
	output = output.getvalue().encode('base64').replace('\n', '')
	filler = (address, btc_amount, balance,
		output, data,
		btc_amount, bch.fiat(amount), currency,
		address,
		bch.fiat(price), currency,
		bch.fiat(amount), currency, btc_amount, address)
	page = load_file('invoice.html') % filler
	return page

# API check if a payment was received
def check_payment(parameters):
	return '1' # TODO DEBUG
	amount = parameters['amount'][0]
	initial = parameters['initial'][0]
	try:
		balance, unconfirmed = bch.get_balance(parameters['address'][0])
	except:
		print('Could not fetch balance: %s' % sys.exc_info()[1])
		return '0'
	if balance + unconfirmed >= initial + amount:
		return '1'
	else:
		return '0'

# Write the details of the payment to a log file
def record_payment(parameters):
	amount = parameters['amount'][0]
	currency = parameters['currency'][0]
	btc_amount = parameters['btc_amount'][0]
	address = parameters['address'][0]
	if not os.path.isdir('logs'):
		os.mkdir('logs')
	logfile = os.path.join('logs', '%s.log' % datetime.date.today().isoformat())
	log = open(logfile, 'a')
	log.write('%s	%s	%s	%s %s\n' % (datetime.datetime.now().isoformat(), address, btc_amount, amount, currency))
	log.close()

# Parse a log file and add its contents to the table
def read_log_file(filename):
	table = ''
	totals = {}
	for currency in config['currencies']:
		totals[currency] = 0
	try:
		logfile = open(filename, 'r')
	except:
		if sys.exc_info()[0] is not IOError:
			print(sys.exc_info()[1])
		return {}, ''
	try:
		for line in logfile.readlines():
			date, address, btc_amount, amount = line.strip().split('	')
			amount, currency = amount.split(' ')
			totals[currency] += float(amount)
			date = date.split('.')[0].replace('T', ' ')
			table += '<tr><td>%s</td><td>%s...</td><td>%s</td><td>%s %s</td></tr>\n' % (date, address[0:10], btc_amount, amount, currency)
	except:
		print('Log file is corrupted: %s (%s)' % (filename, sys.exc_info()[1]))
		table += '<tr><td colspan="4" class="error">The log file is corrupted!</td></tr>'
	logfile.close()
	return totals, table


# Display a log of recent transactions
def show_logs(parameters):
	if 'date' not in parameters:
		date = datetime.date.today().isoformat()
	else:
		date = parameters['date'][0]
	# Process the current and calculate next and previous date
	days = []
	# Day scope
	if len(date) == 10:
		d = datetime.datetime.strptime(date, '%Y-%m-%d')
		delta = datetime.timedelta(1)
		next_date = (d + delta).date().isoformat()
		prev_date = (d - delta).date().isoformat()
		tag_s = 'W'
		scope_s = '%s-W%s' % d.isocalendar()[0:2]
		tag_m = 'M'
		scope_m = '%s-%s' % (d.year, str(d.month).zfill(2))
		tag_l = 'Y'
		scope_l = str(d.year)
		days = [date]
	# Week scope
	elif len(date) == 8:
		# Convert ISO week to Python date
		_year = int(date[0:4])
		_week = int(date[6:8])
		ref_date = datetime.date(_year, 1, 4)
		ref_week, ref_day = ref_date.isocalendar()[1:3]
		d = (ref_date + datetime.timedelta(days=1-ref_day, weeks=_week-ref_week))
		# Calculate offsets
		delta = datetime.timedelta(7)
		next_date = '%s-W%02d' % (d + delta).isocalendar()[0:2]
		prev_date = '%s-W%02d' % (d - delta).isocalendar()[0:2]
		tag_s = 'D'
		scope_s = (d + datetime.timedelta(3)).isoformat()
		tag_m = 'M'
		scope_m = '%s-%s' % (d.year, str(d.month).zfill(2))
		tag_l = 'Y'
		scope_l = str(d.year)
		# Populate date list
		for i in range(7):
			days.append((d + datetime.timedelta(i - config['week_start'])).isoformat())
		print('range %s to %s' % (days[0], days[6]))
	# Month scope
	elif len(date) == 7:
		d = datetime.datetime.strptime(date, '%Y-%m')
		if d.month == 12:
			year, month = d.year + 1, 1
		else:
			year, month = d.year, d.month + 1
		next_date = '%s-%s' % (year, str(month).zfill(2))
		if d.month == 1:
			year, month = d.year - 1, 12
		else:
			year, month = d.year, d.month - 1
		prev_date = '%s-%s' % (year, str(month).zfill(2))
		tag_s = 'D'
		scope_s = '%s-%s-15' % (d.year, str(d.month).zfill(2))
		tag_m = 'W'
		scope_m = '%s-W%02d' % (d + datetime.timedelta(15)).isocalendar()[0:2]
		tag_l = 'Y'
		scope_l = str(d.year)
		# Populate date list
		_date = datetime.date(d.year, d.month, 1)
		while _date.month == d.month:
			days.append(_date.isoformat())
			_date += datetime.timedelta(1)
	# Year scope
	elif len(date) == 4:
		d = datetime.datetime.strptime(date, '%Y')
		next_date = str(d.year + 1)
		prev_date = str(d.year - 1)
		tag_s = 'D'
		scope_s = '%s-06-15' % d.year
		tag_m = 'W'
		scope_m = '%s-W26' % d.year
		tag_l = 'M'
		scope_l = '%s-06' % d.year
		# Populate date list
		_date = datetime.date(d.year, 1, 1)
		while _date.year == d.year:
			days.append(_date.isoformat())
			_date += datetime.timedelta(1)
	else:
		raise ValueError
	# Create a transaction table and calculate totals
	page = load_file('logs.html')
	table = ''
	table_head = ''
	table_foot = ''
	summary = ''
	totals = {}
	# Compile transaction table and calculate date totals
	for _date in days:
		_totals, _table = read_log_file(os.path.join('logs', '%s.log' % _date))
		table += _table
		for k in _totals.keys():
			if k in totals:
				totals[k] += _totals[k]
			else:
				totals[k] = _totals[k]
	for sign in totals.keys():
		if totals[sign] != 0:
			summary += '<p>%s %s</p>\n' % (bch.fiat(totals[sign]), sign)
	# Format and return the logs page
	if table != '':
		table_head = '<h2>Transactions:</h2>\n<table class="listing">\n<tr><th>Date and time</th><th>Address</th><th>Amount</th><th>Amount (fiat)</th></tr>\n'
		table_foot = '</table>\n'
	else:
		summary = '<p>No transactions.</p>'
	return page % (prev_date, tag_s, scope_s, tag_m, scope_m, tag_l, scope_l, next_date,
		date, summary, table_head + table + table_foot)

# Main webapp function
def minipos(environ, start_response):
	filler = ()
	ip_addr = environ['REMOTE_ADDR']
	subnet = '.'.join(ip_addr.split('.')[0:3]) + '.0'
	if '0.0.0.0' not in config['allowed_ips'] and ip_addr not in config['allowed_ips'] and subnet not in config['allowed_ips']:
		status = '403 Not Allowed'
		page = '<!doctype html><body><h1>403 Not Allowed</h1></body></html>'
		start_response(status, [])
		return [page]
	request = environ['PATH_INFO'].lstrip('/').split('/')[-1]
	parameters = urlparse.parse_qs(environ['QUERY_STRING'])
	status = '200 OK'
	headers = []
	page = ''
	# Prepare individual app pages
	if request == 'style.css':
		headers = [('Content-type', 'text/css')]
	elif request == 'scripts.js':
		headers = [('Content-type', 'text/javascript')]
		filler = (repr(config['currencies']))
	elif request == 'invoice':
		headers = [('Content-type', 'text/html')]
		page = create_invoice(parameters)
	elif request == 'check':
		page = check_payment(parameters)
		headers = [('Content-type', 'text/plain')]
	elif request == 'record':
		record_payment(parameters)
		status = '303 See Other\nLocation: request'
		page = 'Redirecting...'
	elif request == 'logs':
		headers = [('Content-type', 'text/html')]
		try:
			page = show_logs(parameters)
		except ValueError:
			status = '400 Bad Request'
			page = '<!doctype html><body><h1>400 Bad Request</h1></body></html>'
	elif request == 'request':
		headers = [('Content-type', 'text/html')]
		request = 'request.html'
		if len(config['currencies']) == 1:
			disabled = 'disabled'
		else:
			disabled = ''
		if config['taxrate'] < 0:
			tax = 'Discount'
		else:
			tax = 'Tax'
		filler = (disabled, config['currencies'][0], config['currencies'][0], tax, config['taxrate'], config['multiplier'])
	elif request == '':
		status = '303 See Other \nLocation: request'
		page = 'Redirecting...'
	if page == '':
		try:
			page = load_file(request) % filler
		except:
			status = '404 Not Found'
			page = '<!doctype html><body><h1>404 Not Found</h1></body></html>'
			print(sys.exc_info()[1])
	# Serve the page
	start_response(status, headers)
	return [page]

# Start the web server
httpd = make_server('', config['port'], minipos)
print('Serving minipos on port %s...' % config['port'])
try:
	httpd.serve_forever()
except:
	print('Server stopped.')
