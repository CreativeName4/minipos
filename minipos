#!/usr/bin/env python2
import os
import sys
from wsgiref.simple_server import make_server
import urlparse
import datetime
import qrcode
import qrcode.image.svg
import StringIO

import bch # Local library file

# Load and parse the config file
config = {}
try:
	f = open('minipos.cfg', 'r')
	lines = f.readlines()
	f.close()
except:
	print('No configuration file found')
	sys.exit(1)
for line in lines:
	# Skip blank lines and comments
	if line.strip() == '' or line.startswith('#'):
		continue
	# Split to key and value pairs
	words = line.strip().split('=')
	key = words[0].strip()
	value = '='.join(words[1:]).strip()
	config[key] = value
# Sanitize config file
try:
	config['taxrate'] = float(config['taxrate'])
except:
	config['taxrate'] = 0
if 'currencies' not in config.keys():
	config['currencies'] = ['USD']
else:
	config['currencies'] = config['currencies'].split(',')
try:
	config['multiplier'] = float(config['multiplier'])
except:
	config['multiplier'] = 1
if 'addresses' not in config.keys():
	print('Required key `addresses` is missing from configuration file')
	sys.exit(2)
else:
	config['addresses'] = config['addresses'].split(',')

# Utility wrapper function
def load_file(filename):
	src = open(filename, 'r')
	data = ''.join(src.readlines())
	src.close()
	return data

# Create a payment request QR page
def create_invoice(parameters):
	if 'currency' not in parameters:
		parameters['currency'] = config['currencies']
	currency = parameters['currency'][0]
	amount = float(parameters['amount'][0]) * config['multiplier']
	price = bch.get_price(currency)
	btc_amount = bch.btc(amount / price)
	address = config['addresses'][0]
	balance, unconfirmed = bch.get_balance(address)
	balance += unconfirmed
	data = 'bitcoincash:%s?amount=%s&label=%s' % (address, btc_amount, 'MiniPOS')
	image = qrcode.make(data, error_correction=qrcode.constants.ERROR_CORRECT_L)
	output = StringIO.StringIO()
	image.save(output)
	output = output.getvalue().encode('base64').replace('\n', '')
	filler = (address, btc_amount, balance,
		output, data,
		btc_amount, bch.fiat(amount), currency,
		address,
		bch.fiat(price), currency,
		bch.fiat(amount), currency, btc_amount, address)
	page = load_file('invoice.html') % filler
	return page

# API check if a payment was received
def check_payment(parameters):
	#return '1' # TODO DEBUG
	amount = parameters['amount'][0]
	initial = parameters['initial'][0]
	try:
		balance, unconfirmed = bch.get_balance(parameters['address'][0])
	except:
		print('Could not fetch balance: %s' % sys.exc_info()[1])
		return '0'
	if balance + unconfirmed >= initial + amount:
		return '1'
	else:
		return '0'

# Write the details of the payment to a log file
def record_payment(parameters):
	amount = parameters['amount'][0]
	currency = parameters['currency'][0]
	btc_amount = parameters['btc_amount'][0]
	address = parameters['address'][0]
	if not os.path.isdir('logs'):
		os.mkdir('logs')
	logfile = os.path.join('logs', '%s.log' % datetime.date.today().isoformat())
	log = open(logfile, 'a')
	log.write('%s	%s	%s	%s %s\n' % (datetime.datetime.now().isoformat(), address, btc_amount, amount, currency))
	log.close()

# Main webapp function
def minipos(environ, start_response):
	filler = ()
	request = environ['PATH_INFO'].lstrip('/').split('/')[-1]
	parameters = urlparse.parse_qs(environ['QUERY_STRING'])
	status = '200 OK'
	headers = []
	page = ''
	# Prepare individual app pages
	if request == 'style.css':
		headers = [('Content-type', 'text/css')]
	elif request == 'scripts.js':
		headers = [('Content-type', 'text/javascript')]
		filler = (repr(config['currencies']))
	elif request == 'invoice':
		headers = [('Content-type', 'text/html')]
		page = create_invoice(parameters)
	elif request == 'check':
		page = check_payment(parameters)
		headers = [('Content-type', 'text/plain')]
	elif request == 'record':
		record_payment(parameters)
		status = '303 See Other\nLocation: request'
		page = 'Redirecting...'
	elif request == 'request':
		headers = [('Content-type', 'text/html')]
		request = 'request.html'
		if len(config['currencies']) == 1:
			disabled = 'disabled'
		else:
			disabled = ''
		filler = (disabled, config['currencies'][0], config['currencies'][0], config['taxrate'])
	elif request == '':
		status = '303 See Other \nLocation: request'
		page = 'Redirecting...'
	if page == '':
		try:
			page = load_file(request) % filler
		except:
			status = '404 Not Found'
			page = '<!doctype html><body><h1>404 Not Found</h1></body></html>'
			print(sys.exc_info()[1])
	# Serve the page
	start_response(status, headers)
	return [page]

# Start the web server
httpd = make_server('', 8080, minipos)
print('Serving minipos on port 8080...')
try:
	httpd.serve_forever()
except:
	print('Server stopped.')
